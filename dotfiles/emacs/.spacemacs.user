;; -*- mode: emacs-lisp -*-
;; Manually edited portion of ~/.spacemacs

;; Set TODO states
(setq org-todo-keywords
    '((sequence
        "TODO(t)"
        "ACTIVE(a)"
        "|"
        "DONE(d)"
        "AWAITING(w)"
        "CANCELED(c)"
)))

(setq org-todo-keyword-faces
    '(("ACTIVE" (:inherit org-todo :foreground "light blue"))
      ("AWAITING" (:inherit org-todo :foreground "#c3c3c3"))
      ("CANCELED" (:inherit org-done :weight bold :foreground "red"))
))

;; Automatically use visual-line-mode in org / text files
;; NOTE: I think this doesn't work
(add-hook 'text-mode-hook #'visual-line-mode)

;; Move the current subtree to one of the archival headers
(defun my/org-move-subtree-to-state ()
  "Move the current subtree to the corresponding header based on its state in the current Org buffer."
  (interactive)
  (let ((line-state nil)
        (target-heading nil)
        (subtree-to-move nil)
        (original-point (point)))
    (save-excursion
      (beginning-of-line)
      (when (looking-at "\\*+ \\(TODO\\|ACTIVE\\|DONE\\|CANCELED\\|AWAITING\\)")
        (setq line-state (match-string 1))
        (cond
         ((string= line-state "AWAITING")
          (setq target-heading "^* BLOCKED"))
         ((string= line-state "DONE")
          (setq target-heading "^* DONE"))
         ((string= line-state "CANCELED")
          (setq target-heading "^* CANCELED"))
         (t
          (message "Line state is not AWAITING, DONE, or CANCELED. No action taken.")
          (cl-return-from my/org-move-subtree-to-state)))

        ;; Store the current subtree content
        (setq subtree-to-move (buffer-substring-no-properties
                               (point)
                               (save-excursion (org-end-of-subtree t) (point))))

        ;; Delete the current subtree
        (delete-region (point) (save-excursion (org-end-of-subtree t) (point)))

        ;; Remove any empty line left behind
        (when (looking-at "\n")
          (delete-char 1))

        ;; Find the target heading and move to the end of its subtree
        (goto-char (point-min))
        (re-search-forward target-heading nil t)
        (org-end-of-subtree)

        ;; Insert the subtree
        (newline)
        (insert subtree-to-move)
        (when (looking-at "\n\n")
          (delete-char 1))))

    ;; Adjust point if it was in or after the moved subtree
    (when (< original-point (point))
      (goto-char (point-min))
      (re-search-forward target-heading nil t)
      (re-search-forward (regexp-quote (substring subtree-to-move 0 (min 50 (length subtree-to-move)))) nil t))))

;; Bind move-subtree-to-state to C-c C-a
(global-set-key (kbd "C-c a") 'my/org-move-subtree-to-state)

(load-library "find-lisp")
(setq org-agenda-files
   (find-lisp-find-files "~/.org" "\.org$"))

