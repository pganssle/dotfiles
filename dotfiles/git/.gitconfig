[push]
    default = current
[pull]
    ff = only  # Fast-forward only when pulling
[core]
    editor = vim
[alias]
    lgd = log --oneline --graph --decorate
    cs = commit -S
    cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
    clean-squashes = "!f(){ [[ -z $(git branch --list main) ]] && BRANCH=master || BRANCH=main; git checkout -q $BRANCH && git for-each-ref refs/heads/ '--format=%(refname:short)' | while read branch; do mergeBase=$(git merge-base $BRANCH $branch) && [[ $(git cherry $BRANCH $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == '-'* ]] && git branch -D $branch; done ; }; f"
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
    add-remote = "!remote_url=$(git get-remote $@) && git remote add $1 $remote_url && \
                  echo \"Added remote $remote_url\""
    rebase-sign = rebase --autosquash --exec 'git commit --amend --no-edit -n -S' -i
    pr = "!f() { git fetch -fu upstream refs/pull/$1/head:pr/${2:-$1} && git checkout pr/$1; }; f"
    pr-clean = "!git checkout master ; git for-each-ref refs/heads/pr/* --format="%(refname)" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
[merge]
    tool = vimdiff
    conflictstyle = diff3
[include]
    # Source local override file if one exist
    path = ~/.gitconfig.local
[init]
    defaultBranch = main
